# Executed on every push by GitHub Actions. This runs CI tests and
# generates wheels (not all) on the following platforms:
#
# * Linux
# * macOS
# * Windows
# * FreeBSD
#
# To skip certain builds see:
# https://cibuildwheel.readthedocs.io/en/stable/options/#build-skip
#
# External GH actions:
# * https://github.com/pypa/cibuildwheel
# * https://github.com/actions/checkout
# * https://github.com/actions/setup-python
# * https://github.com/actions/upload-artifact
# * https://github.com/marketplace/actions/cancel-workflow-action
# * https://github.com/vmactions/freebsd-vm

on:
  pull_request:
  push:
    branches: master
  release:
    types: [released, prereleased]
  workflow_dispatch:  # allows running workflow manually from the Actions tab
name: build
jobs:
  # Linux + macOS + Windows CPython 3.6+
  cp36:
    name: cp36+, ${{ matrix.os }}, ${{ matrix.archs }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        include:
          - {os: macos-11, archs: "x86_64 universal2"}
          - {os: ubuntu-20.04, archs: "x86_64 i686"}
          - {os: ubuntu-20.04, archs: "aarch64"}
          - {os: windows-2019, archs: "AMD64 x86"}

    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.9.1
      with:
        access_token: ${{ github.token }}

    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
      with:
        python-version: 3.9
        cache: pip
        cache-dependency-path: .github/workflows/build.yml

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      if: matrix.archs == 'aarch64'

    - name: Run tests
      uses: pypa/cibuildwheel@v2.6.0
      with:
        config-file: "./cibuildwheel.toml"
      env:
        CIBW_ARCHS: ${{ matrix.archs }}

    - name: Create wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels
        path: wheelhouse
        
    - uses: softprops/action-gh-release@v1
      if: github.event_name == 'release'
      with:
        files: wheelhouse/*.whl

    - name: Print hashes
      if: matrix.os == 'ubuntu-latest'
      run: |
        make generate-manifest
        python setup.py sdist
        mv dist/psutil*.tar.gz wheelhouse/
        python scripts/internal/print_hashes.py wheelhouse/

  # Windows cp37+ tests
  # psutil tests do not like running from a virtualenv with python>=3.7 so
  # not using cibuildwheel for those. run them "manually" with this job.
  windows-cp3-test:
    name: windows tests ${{ matrix.python }} ${{ matrix.architecture }}
    needs: cp36
    runs-on: windows-2019
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        python: ["3.7", "3.8", "3.9", "3.10", "3.11-dev"]
        architecture: ["x86", "x64"]

    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.9.1
      with:
        access_token: ${{ github.token }}
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
      with:
        python-version: "${{ matrix.python }}"
        architecture: "${{ matrix.architecture }}"
        cache: pip
        cache-dependency-path: .github/workflows/build.yml
    - name: Download wheels
      uses: actions/download-artifact@v3
      with:
        name: wheels
        path: wheelhouse
    - name: Run tests
      run: |
        mkdir .tests
        cd .tests
        pip install $(find ../wheelhouse -name '*-cp36-abi3-${{ matrix.architecture == 'x86' && 'win32' || 'win_amd64'}}.whl')[test]
        export PYTHONWARNINGS=always
        export PYTHONUNBUFFERED=1
        export PSUTIL_DEBUG=1
        python ../psutil/tests/runner.py
        python ../psutil/tests/test_memleaks.py
      shell: bash

  # Linux + macOS + CPython 2.7 & 3.5
  linux-macos-cp27-cp35:
    name: cp27/cp35, ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-11]
    env:
      CIBW_TEST_COMMAND:
        PYTHONWARNINGS=always PYTHONUNBUFFERED=1 PSUTIL_DEBUG=1 python {project}/psutil/tests/runner.py &&
        PYTHONWARNINGS=always PYTHONUNBUFFERED=1 PSUTIL_DEBUG=1 python {project}/psutil/tests/test_memleaks.py
      CIBW_TEST_EXTRAS: test
      CIBW_BUILD: 'cp27-* cp35-*'
      CIBW_SKIP: 'cp35-macosx_x86_64'

    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.9.1
      with:
        access_token: ${{ github.token }}

    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
      with:
        python-version: 3.9
        cache: pip
        cache-dependency-path: .github/workflows/build.yml

    - name: Install cibuildwheel
      run: pip install cibuildwheel==1.12.0

    - name: Run tests
      run: cibuildwheel .

    - name: Create wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels
        path: wheelhouse

    - uses: softprops/action-gh-release@v1
      if: github.event_name == 'release'
      with:
        files: wheelhouse/*.whl

    - name: Print hashes
      if: matrix.os == 'ubuntu-latest'
      run: |
        make generate-manifest
        python setup.py sdist
        mv dist/psutil*.tar.gz wheelhouse/
        python scripts/internal/print_hashes.py wheelhouse/

  freebsd:
    runs-on: macos-12
    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.6.0
      with:
        access_token: ${{ github.token }}

    - uses: actions/checkout@v3

    - name: Run tests
      id: test
      uses: vmactions/freebsd-vm@v0.1.5
      with:
        usesh: true
        prepare: pkg install -y gcc python3
        run: |
          set +e
          export \
            PYTHONUNBUFFERED=1 \
            PYTHONWARNINGS=always \
            PSUTIL_DEBUG=1
          python3 -m pip install --user setuptools
          python3 setup.py install
          python3 psutil/tests/runner.py
          python3 psutil/tests/test_memleaks.py

  linters:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
      with:
        cache: pip
        cache-dependency-path: .github/workflows/build.yml
    - name: 'Run linters'
      run: |
        # py2
        curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py
        python2 get-pip.py
        python2 -m pip install flake8
        python2 -m flake8 .
        # py3
        python3 -m pip install flake8 isort
        python3 -m flake8 .
        python3 -m isort --settings=.isort.cfg .
        # clinter
        find . -type f \( -iname "*.c" -o -iname "*.h" \) | xargs python3 scripts/internal/clinter.py
